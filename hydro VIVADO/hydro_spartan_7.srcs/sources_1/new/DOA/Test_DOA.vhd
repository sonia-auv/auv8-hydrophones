-- -------------------------------------------------------------
-- 
-- File Name: test_enable_change\hdlsrc\Test_DOA\Test_DOA.vhd
-- Created: 2021-10-20 16:31:19
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-07
-- Target subsystem base rate: 1e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- SNR_Check_1                   ce_out        1e-07
-- Frequency                     ce_out        1e-07
-- Y                             ce_out        1e-07
-- X                             ce_out        1e-07
-- Debug                         ce_out        1e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Test_DOA
-- Source Path: Test_DOA
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Test_DOA IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Canal1                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        Canal2                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        Canal3                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        Canal4                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        Enable                            :   IN    std_logic;
        Signal_Threshold                  :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        SNR_Threshold                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        ce_out                            :   OUT   std_logic;
        SNR_Check_1                       :   OUT   std_logic;
        Frequency                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
        Y                                 :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En19
        X                                 :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En19
        Debug                             :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27
        );
END Test_DOA;


ARCHITECTURE rtl OF Test_DOA IS

  -- Component Declarations
  COMPONENT FFTs
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Canal1                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Canal2                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Canal3                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Canal4                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Enable                          :   IN    std_logic;
          Signal_Threshold                :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Magnitude_Ref                   :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase_Ref                       :   OUT   std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_out_Ref                   :   OUT   std_logic;
          Magnitude1                      :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase1                          :   OUT   std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_out1                      :   OUT   std_logic;
          Magnitude2                      :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase2                          :   OUT   std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_out2                      :   OUT   std_logic;
          Magnitude3                      :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase3                          :   OUT   std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_out3                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Maximum_Hydro_Ref
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase                           :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_In                        :   IN    std_logic;
          Signal_Max                      :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase_Max                       :   OUT   std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_Out                       :   OUT   std_logic;
          Index                           :   OUT   std_logic_vector(16 DOWNTO 0)  -- ufix17
          );
  END COMPONENT;

  COMPONENT SNR_Check
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          validIn_sum                     :   IN    std_logic;
          alphaValue                      :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          validIn_Max                     :   IN    std_logic;
          SNR_Threshold                   :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          SNR_check_1                     :   OUT   std_logic;
          Debug                           :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27
          );
  END COMPONENT;

  COMPONENT Maximum_Hydro_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase                           :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_In                        :   IN    std_logic;
          Phase_Max                       :   OUT   std_logic_vector(28 DOWNTO 0)  -- sfix29_En26
          );
  END COMPONENT;

  COMPONENT Maximum_Hydro_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase                           :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_In                        :   IN    std_logic;
          Phase_Max                       :   OUT   std_logic_vector(28 DOWNTO 0)  -- sfix29_En26
          );
  END COMPONENT;

  COMPONENT Maximum_Hydro_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_rsvd                     :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
          Phase                           :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Valid_In                        :   IN    std_logic;
          Phase_Max                       :   OUT   std_logic_vector(28 DOWNTO 0)  -- sfix29_En26
          );
  END COMPONENT;

  COMPONENT Calcul_Direction
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Index                           :   IN    std_logic_vector(16 DOWNTO 0);  -- ufix17
          PhaseRef                        :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Phase1                          :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Phase2                          :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Phase3                          :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          Trigger                         :   IN    std_logic;
          Frequence                       :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
          Y                               :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En19
          X                               :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En19
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : FFTs
    USE ENTITY work.FFTs(rtl);

  FOR ALL : Maximum_Hydro_Ref
    USE ENTITY work.Maximum_Hydro_Ref(rtl);

  FOR ALL : SNR_Check
    USE ENTITY work.SNR_Check(rtl);

  FOR ALL : Maximum_Hydro_1
    USE ENTITY work.Maximum_Hydro_1(rtl);

  FOR ALL : Maximum_Hydro_2
    USE ENTITY work.Maximum_Hydro_2(rtl);

  FOR ALL : Maximum_Hydro_3
    USE ENTITY work.Maximum_Hydro_3(rtl);

  FOR ALL : Calcul_Direction
    USE ENTITY work.Calcul_Direction(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL FFTs_out1                        : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL FFTs_out2                        : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL FFTs_out3                        : std_logic;
  SIGNAL FFTs_out4                        : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL FFTs_out5                        : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL FFTs_out6                        : std_logic;
  SIGNAL FFTs_out7                        : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL FFTs_out8                        : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL FFTs_out9                        : std_logic;
  SIGNAL FFTs_out10                       : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL FFTs_out11                       : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL FFTs_out12                       : std_logic;
  SIGNAL Maximum_Hydro_Ref_out1           : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Maximum_Hydro_Ref_out2           : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL Maximum_Hydro_Ref_out3           : std_logic;
  SIGNAL Maximum_Hydro_Ref_out4           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL SNR_Check_out1                   : std_logic;
  SIGNAL SNR_Check_out4                   : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Maximum_Hydro_1_out2             : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL Maximum_Hydro_2_out2             : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL Maximum_Hydro_3_out2             : std_logic_vector(28 DOWNTO 0);  -- ufix29
  SIGNAL Calcul_Direction_out1            : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Calcul_Direction_out2            : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL Calcul_Direction_out3            : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL SNR_Check_out4_signed            : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL Delay1_out1                      : signed(26 DOWNTO 0);  -- sfix27

BEGIN
  u_FFTs : FFTs
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Canal1 => Canal1,  -- uint16
              Canal2 => Canal2,  -- uint16
              Canal3 => Canal3,  -- uint16
              Canal4 => Canal4,  -- uint16
              Enable => Enable,
              Signal_Threshold => Signal_Threshold,  -- uint16
              Magnitude_Ref => FFTs_out1,  -- sfix27_En8
              Phase_Ref => FFTs_out2,  -- sfix29_En26
              Valid_out_Ref => FFTs_out3,
              Magnitude1 => FFTs_out4,  -- sfix27_En8
              Phase1 => FFTs_out5,  -- sfix29_En26
              Valid_out1 => FFTs_out6,
              Magnitude2 => FFTs_out7,  -- sfix27_En8
              Phase2 => FFTs_out8,  -- sfix29_En26
              Valid_out2 => FFTs_out9,
              Magnitude3 => FFTs_out10,  -- sfix27_En8
              Phase3 => FFTs_out11,  -- sfix29_En26
              Valid_out3 => FFTs_out12
              );

  u_Maximum_Hydro_Ref : Maximum_Hydro_Ref
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Signal_rsvd => FFTs_out1,  -- sfix27_En8
              Phase => FFTs_out2,  -- sfix29_En26
              Valid_In => FFTs_out3,
              Signal_Max => Maximum_Hydro_Ref_out1,  -- sfix27_En8
              Phase_Max => Maximum_Hydro_Ref_out2,  -- sfix29_En26
              Valid_Out => Maximum_Hydro_Ref_out3,
              Index => Maximum_Hydro_Ref_out4  -- ufix17
              );

  u_SNR_Check : SNR_Check
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              a => FFTs_out1,  -- sfix27_En8
              validIn_sum => FFTs_out3,
              alphaValue => Maximum_Hydro_Ref_out1,  -- sfix27_En8
              validIn_Max => Maximum_Hydro_Ref_out3,
              SNR_Threshold => SNR_Threshold,  -- uint16
              SNR_check_1 => SNR_Check_out1,
              Debug => SNR_Check_out4  -- sfix27
              );

  u_Maximum_Hydro_1 : Maximum_Hydro_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Signal_rsvd => FFTs_out4,  -- sfix27_En8
              Phase => FFTs_out5,  -- sfix29_En26
              Valid_In => FFTs_out6,
              Phase_Max => Maximum_Hydro_1_out2  -- sfix29_En26
              );

  u_Maximum_Hydro_2 : Maximum_Hydro_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Signal_rsvd => FFTs_out7,  -- sfix27_En8
              Phase => FFTs_out8,  -- sfix29_En26
              Valid_In => FFTs_out9,
              Phase_Max => Maximum_Hydro_2_out2  -- sfix29_En26
              );

  u_Maximum_Hydro_3 : Maximum_Hydro_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Signal_rsvd => FFTs_out10,  -- sfix27_En8
              Phase => FFTs_out11,  -- sfix29_En26
              Valid_In => FFTs_out12,
              Phase_Max => Maximum_Hydro_3_out2  -- sfix29_En26
              );

  u_Calcul_Direction : Calcul_Direction
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Index => Maximum_Hydro_Ref_out4,  -- ufix17
              PhaseRef => Maximum_Hydro_Ref_out2,  -- sfix29_En26
              Phase1 => Maximum_Hydro_1_out2,  -- sfix29_En26
              Phase2 => Maximum_Hydro_2_out2,  -- sfix29_En26
              Phase3 => Maximum_Hydro_3_out2,  -- sfix29_En26
              Trigger => SNR_Check_out1,
              Frequence => Calcul_Direction_out1,  -- ufix27
              Y => Calcul_Direction_out2,  -- sfix31_En19
              X => Calcul_Direction_out3  -- sfix31_En19
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= SNR_Check_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  SNR_Check_out4_signed <= signed(SNR_Check_out4);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(16#0000000#, 27);
      ELSIF enb = '1' THEN
        Delay1_out1 <= SNR_Check_out4_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Debug <= std_logic_vector(Delay1_out1);

  ce_out <= clk_enable;

  SNR_Check_1 <= Delay_out1;

  Frequency <= Calcul_Direction_out1;

  Y <= Calcul_Direction_out2;

  X <= Calcul_Direction_out3;

END rtl;

